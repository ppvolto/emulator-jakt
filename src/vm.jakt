struct Value {
    value: i64
    function from_u8(value: u8) -> Value {
        let value_u64 = value as! u64;
        let value_i64 = (value_u64 << 56) as! i64
        return Value(value: value_i64 >> 56)
    }

    function from_i8(value: i8) -> Value {
        let value_u64 = value as! u64;
        let value_i64 = ((value_u64 as! u64) << 56) as! i64
        return Value(value: value_i64 >> 56)
    }

    function from_u16(value: u16) -> Value {
        let value_u64 = value as! u64;
        let value_i64 = (value_u64 << 48) as! i64
        return Value(value: value_i64 >> 48)
    }

    function from_i16(value: i16) -> Value {
        let value_u64 = value as! u64;
        let value_i64 = (value_u64 << 48) as! i64
        return Value(value: value_i64 >> 48)
    }

    function from_u32(value: u32) -> Value {
        let value_u64 = value as! u64;
        let value_i64 = (value_u64 << 48) as! i64
        return Value(value: value_i64 >> 48)
    }

    function from_i32(value: i32) -> Value {
        let value_u64 = (value as! u64);
        let value_i64 = (value_u64 << 32) as! i64
        return Value(value: value_i64 >> 32)
    }

    function from_u64(value: u64) -> Value {
        return Value(value: value as! i64)
    }

    function from_i64(value: i64) -> Value {
        return Value(value: value)
    }

    function sign_shift_right(this, anon steps: usize) {
        return ((.value as! u64) & 0x8000000000000000) >> steps;
    }

    function to_u8(this) -> u8 {
        let sign = .sign_shift_right(56);
        return (.value | sign) as! u8
    }

    function to_i8(this) -> i8 {
        let sign = .sign_shift_right(56);
        return (.value | sign) as! u8
    }

    function to_u16(this) -> u16 {
        let sign = .sign_shift_right(48);
        return (.value | sign) as! u16
    }

    function to_i16(this) -> i16 {
        let sign = .sign_shift_right(48);
        return (.value | sign) as! i16
    }

    function to_u32(this) -> u32 {
        let sign = .sign_shift_right(32);
        return (.value | sign) as! u32
    }

    function to_i32(this) -> i32 {
        let sign = .sign_shift_right(32);
        return (.value | sign) as! i32
    }

    function to_u64(this) -> u64 {
        return .value as! u64
    }

    function to_i64(this) -> i64 {
        return .value as! i64
    }

    function to_usize(this) -> usize {
        return .value as! usize
    }

}

struct ProgrammBuffer {
    value: [u8]
    function create(buffer: [u8]) {
        return ProgrammBuffer(value: buffer)
    }

    function from_buffer(mut this, buffer: [u8]) {
        .value = buffer
    }

    function read(this, address: usize, size: usize) -> Value {
        let index = address / 8;
        let steps = size / 8;
        mut value = .value[index] as! u64;
        for idx in 1..steps {
            value = (value << 8) | .value[index + idx]
        }
        return Value::from_u64(value)
    }

}